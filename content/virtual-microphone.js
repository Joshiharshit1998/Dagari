!function(){console.info("[Sokuji] [VirtualMic] Virtual Microphone script loaded");const e="sokuji-virtual-microphone",t="Sokuji Virtual Microphone",a=24e3,i=.02*a,o=2*a;let n=null,r=null,l=null,u=!1,c=0,s=!1,d=[],m=[],h=!1,g=new Map,f=new Map;function k(){if(n&&r&&p()){if(console.debug("[Sokuji] [VirtualMic] Virtual microphone already initialized"),l.active)return console.debug("[Sokuji] [VirtualMic] Virtual microphone is active, returning true"),!0;console.debug("[Sokuji] [VirtualMic] Virtual microphone is not active, reinitializing"),y()}try{if(console.info("[Sokuji] [VirtualMic] Initializing virtual microphone"),n=new window.MediaStreamTrackGenerator({kind:"audio"}),r=n.writable.getWriter(),l=new MediaStream([n]),n.id)console.debug(`[Sokuji] [VirtualMic] Using existing track ID: ${n.id}`);else try{Object.defineProperty(n,"id",{value:e})}catch(e){console.debug("[Sokuji] [VirtualMic] Could not set custom track ID",e)}try{Object.defineProperty(n,"label",{value:t})}catch(e){console.debug("[Sokuji] [VirtualMic] Could not set track label",e)}return u=!0,c=1e3*performance.now(),console.info("[Sokuji] [VirtualMic] Virtual microphone initialized successfully"),!0}catch(e){return console.error("[Sokuji] [VirtualMic] Failed to initialize virtual microphone:",e),y(),!1}}function p(){return r&&null!==r.desiredSize&&l.active}function v(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const{chunkIndex:i,totalChunks:o,sampleRate:n=a,trackId:r="default"}=t,l="immediate"===r;if(!e||0===e.length)return void console.warn("[Sokuji] [VirtualMic] Received empty audio data");const u=new Float32Array(e.length);for(let t=0;t<e.length;t++)u[t]=Math.max(-1,Math.min(1,e[t]/32768));if(void 0===i||void 0===o)return console.debug(`[Sokuji] [VirtualMic] Adding single audio chunk to ${l?"immediate":"regular"} playback queue (trackId: ${r})`),void M({data:u,sampleRate:n},l);console.debug(`[Sokuji] [VirtualMic] Received ${l?"immediate":"regular"} chunk ${i+1}/${o} for track ${r}`);const c=l?f:g;c.has(r)||c.set(r,{chunks:new Map,totalChunks:o,sampleRate:n});const s=c.get(r);if(s.chunks.set(i,u),s.chunks.size===s.totalChunks){console.debug(`[Sokuji] [VirtualMic] Complete ${l?"immediate":"regular"} batch received for track ${r} (${s.totalChunks} chunks)`);const e=function(e){const t=arguments.length>1&&void 0!==arguments[1]&&arguments[1]?f:g;if(!t.has(e))return console.error(`[Sokuji] [VirtualMic] Cannot assemble incomplete batch for track ${e} (buffer not found)`),null;const a=t.get(e);if(!a||a.chunks.size<a.totalChunks)return console.error(`[Sokuji] [VirtualMic] Cannot assemble incomplete batch for track ${e}`),null;let i=0;for(let t=0;t<a.totalChunks;t++){const o=a.chunks.get(t);if(!o)return console.error(`[Sokuji] [VirtualMic] Missing chunk ${t} for track ${e}`),null;i+=o.length}const o=new Float32Array(i);let n=0;for(let e=0;e<a.totalChunks;e++){const t=a.chunks.get(e);o.set(t,n),n+=t.length}return console.debug(`[Sokuji] [VirtualMic] Assembled batch: ${i} samples for track ${e}`),{data:o,sampleRate:a.sampleRate}}(r,l);e&&M(e,l),c.delete(r)}}function M(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1]?(m.push(e),console.debug(`[Sokuji] [VirtualMic] Added immediate batch to queue. Queue length: ${m.length}`)):(d.push(e),console.debug(`[Sokuji] [VirtualMic] Added batch to queue. Queue length: ${d.length}`)),s||s||0===m.length&&0===d.length||(u&&p()||k()?(s=!0,console.debug("[Sokuji] [VirtualMic] Starting playback process"),b()):console.error("[Sokuji] [VirtualMic] Cannot start playback - virtual mic not ready"))}async function b(){if(s){if(0===m.length&&0===d.length)return console.debug("[Sokuji] [VirtualMic] Playback queue empty, stopping playback"),void(s=!1);try{const e=function(){const e=[],t=[];let n=a,r=0,l=0;for(;m.length>0&&l<o;){if(l+m[0].data.length>o){const t=o-l,a=m.shift(),i=a.data.slice(0,t);e.push({data:i,sampleRate:a.sampleRate});const r=a.data.slice(t);r.length>0&&m.unshift({data:r,sampleRate:a.sampleRate}),l+=i.length,n=a.sampleRate;break}const t=m.shift();e.push(t),l+=t.data.length,n=t.sampleRate}let u=0;for(;d.length>0&&u<o;){if(u+d[0].data.length>o){const e=o-u,a=d.shift(),i=a.data.slice(0,e);t.push({data:i,sampleRate:a.sampleRate});const r=a.data.slice(e);r.length>0&&d.unshift({data:r,sampleRate:a.sampleRate}),u+=i.length,n=a.sampleRate;break}const e=d.shift();t.push(e),u+=e.data.length,n=e.sampleRate}r=Math.max(l,u);const c=m.length>0||d.length>0;if(r>=i||!c){const a=r/n*1e3;return console.debug(`[Sokuji] [VirtualMic] Collected batches for mixing: immediate=${e.length} (${l} samples), regular=${t.length} (${u} samples), mixed=${r} samples, ${a.toFixed(1)}ms`),{immediateBatches:e,regularBatches:t,maxSamples:r,targetSampleRate:n}}return e.reverse().forEach((e=>m.unshift(e))),t.reverse().forEach((e=>d.unshift(e))),console.debug(`[Sokuji] [VirtualMic] Not enough data for playback (${r} < ${i}), waiting for more`),null}();if(!e)return console.debug("[Sokuji] [VirtualMic] No batches collected, stopping playback"),void(s=!1);const{immediateBatches:t,regularBatches:n,maxSamples:l,targetSampleRate:u}=e,h=function(e,t,a,i){const o=S(e),n=S(t),r=new Float32Array(a);if(o){const e=Math.min(o.data.length,a);for(let t=0;t<e;t++)r[t]+=o.data[t];console.debug(`[Sokuji] [VirtualMic] Mixed immediate audio: ${e} samples`)}if(n){const e=Math.min(n.data.length,a);for(let t=0;t<e;t++)r[t]+=n.data[t];console.debug(`[Sokuji] [VirtualMic] Mixed regular audio: ${e} samples`)}for(let e=0;e<a;e++)r[e]>1?r[e]=1:r[e]<-1&&(r[e]=-1);return{data:r,sampleRate:i}}(t,n,l,u),g=await async function(e){const{data:t,sampleRate:a}=e,i=new window.AudioData({format:"f32",sampleRate:a,numberOfFrames:t.length,numberOfChannels:1,timestamp:c,data:t});await r.write(i);const o=t.length/a*1e6;return c+=o,t.length/a*1e3}(h);console.debug(`[Sokuji] [VirtualMic] Played batch of ${h.data.length} samples, duration: ${g}ms`),setTimeout((()=>{b()}),g)}catch(e){"InvalidStateError"===e.name&&e.message&&e.message.includes("Stream closed")||console.error("[Sokuji] [VirtualMic] Error in playback process:",e),setTimeout((()=>{b()}),100)}}}function S(e){if(0===e.length)return null;if(1===e.length)return e[0];const t=e.reduce(((e,t)=>e+t.data.length),0),a=e[e.length-1].sampleRate,i=new Float32Array(t);let o=0;for(const t of e)i.set(t.data,o),o+=t.data.length;return{data:i,sampleRate:a}}function y(){if(console.info("[Sokuji] [VirtualMic] Cleaning up virtual microphone"),u=!1,s=!1,h=!1,d.length=0,m.length=0,g.clear(),f.clear(),r){try{null!==r.desiredSize&&r.releaseLock()}catch(e){console.warn("[Sokuji] [VirtualMic] Error releasing writer lock:",e)}r=null}n=null,l=null,c=0}let V=null;async function j(){if(V)console.debug("[Sokuji] [VirtualMic] Virtual device already registered");else try{if(await new Promise(((e,t)=>{if(navigator.mediaDevices&&"function"==typeof navigator.mediaDevices.addEmulatedDevice)return console.info("[Sokuji] [VirtualMic] Device emulator already available"),void e();const a=()=>{console.info("[Sokuji] [VirtualMic] Device emulator loaded event received"),window.removeEventListener("dyte.deviceEmulatorLoaded",a),e()};window.addEventListener("dyte.deviceEmulatorLoaded",a),setTimeout((()=>{window.removeEventListener("dyte.deviceEmulatorLoaded",a),t(new Error("Device emulator did not load within 10 seconds"))}),1e4)})),!k())throw new Error("Failed to initialize virtual microphone");V=await navigator.mediaDevices.addEmulatedDevice("audioinput",void 0,{stream:l,label:t,deviceId:e,groupId:"sokuji-device-group"}),console.info(`[Sokuji] [VirtualMic] Virtual microphone registered with device ID: ${V}`)}catch(e){console.error("[Sokuji] [VirtualMic] Failed to register virtual device:",e)}}window.addEventListener("message",(function(e){if(e.source!==window)return;const{type:t,data:a}=e.data||{};if("PCM_DATA"===t){const{pcmData:t,sampleRate:a,chunkIndex:i,totalChunks:o,trackId:n}=e.data;if(!t||!Array.isArray(t))return void console.error("[Sokuji] [VirtualMic] Invalid PCM data received");v(new Int16Array(t),{chunkIndex:i,totalChunks:o,sampleRate:a,trackId:n})}})),window.addEventListener("dyte.deviceEmulatorLoaded",(()=>{console.info("[Sokuji] [VirtualMic] Device emulator loaded, registering virtual microphone..."),j()})),navigator.mediaDevices&&"function"==typeof navigator.mediaDevices.addEmulatedDevice&&(console.info("[Sokuji] [VirtualMic] Device emulator already available, registering virtual microphone..."),j()),window.sokujiVirtualMic={isActive:()=>u,isPlaying:()=>s,isPlayingImmediate:()=>h,getQueueLength:()=>d.length,getImmediateQueueLength:()=>m.length,getTotalQueueLength:()=>d.length+m.length,getBufferedTracks:()=>Array.from(g.keys()),getBufferedImmediateTracks:()=>Array.from(f.keys()),getAllBufferedTracks:()=>Array.from(g.keys()).concat(Array.from(f.keys())),getDeviceId:()=>V,getVirtualStream:()=>l,addAudioData:v,cleanup:y,reinitialize:k,registerDevice:j},console.info("[Sokuji] [VirtualMic] Virtual microphone setup complete (Device Emulator version)")}();